import { CocoaVersion } from "cocoa-discord-utils/meta";
import {
  CogSlashClass,
  Param,
  SlashCommand,
} from "cocoa-discord-utils/slash/class";
import { getStatusFields } from "cocoa-discord-utils/template";

import {
  ActionRowBuilder,
  Client,
  InteractionType,
  ModalActionRowComponentBuilder,
  ModalBuilder,
  ModalSubmitInteraction,
  TextInputBuilder,
  TextInputStyle,
} from "discord.js";

import { Actions } from "../actions.js";
import { combinedQuotes, sclient } from "../legacy.js";
import { getUser3rdParty, prisma, updateUserCredit } from "../prisma.js";
import { prismaQuote } from "../prismaQuote.js";

import { style } from "./styles.js";

function trim(str: string) {
  return str.replace(/\s/g, "").toLowerCase();
}

function lim(str: string, len = 256) {
  return str.length > len ? str.slice(0, len - 3) + "..." : str;
}

export default class Salim extends CogSlashClass {
  constructor(client: Client) {
    super("Salim Cog", "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÜ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏™‡∏•‡∏¥‡πà‡∏°");

    client.on("interactionCreate", (ctx) => {
      if (ctx.type == InteractionType.ModalSubmit) {
        if (ctx.customId == "essay") {
          this.onEssaySubmit(ctx);
        }
      }
    });
  }

  @SlashCommand("‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏™‡∏•‡∏¥‡πà‡∏°")
  async status(
    ctx: SlashCommand.Context,
    @Param.Ephemeral ephemeral: Param.Ephemeral.Type,
  ) {
    const emb = style
      .use(ctx)
      .setTitle("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏™‡∏•‡∏¥‡πà‡∏°")
      .setDescription(
        `‡∏ö‡∏≠‡∏ó‡∏™‡∏•‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô ${process.env.npm_package_version}
‡πÇ‡∏Å‡πÇ‡∏Å‡πâ‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏¢‡∏π‡∏ó‡∏¥‡∏•‡∏•‡∏¥‡∏ï‡∏µ‡πâ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô ${CocoaVersion}`,
      )
      .addFields(await getStatusFields(ctx));

    await ctx.reply({
      embeds: [emb],
      ephemeral: ephemeral ?? false,
    });
  }

  @SlashCommand("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ ‡∏Ñ‡∏∏ ‡∏ì ‡∏† ‡∏≤ ‡∏û ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á")
  async train(
    ctx: SlashCommand.Context,
    @Param.String("‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ ‡∏Ñ‡∏∏ ‡∏ì ‡∏† ‡∏≤ ‡∏û ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á")
    quote: Param.String.Type,
  ) {
    await ctx.deferReply();

    if (combinedQuotes.getData().includes(quote)) {
      await ctx.followUp("‡∏ã‡πâ‡∏≥‡∏Ñ‡∏£‡∏±‡∏ö ‡∏´‡∏±‡∏î‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ó‡∏≥‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≤‡∏°‡∏Å‡∏µ‡∏ö‡πÑ‡∏õ‡πÑ‡∏î‡πâ");
      await updateUserCredit(ctx, Actions.DuplicateTrain);
      return;
    }

    await prisma.quote.create({
      data: {
        content: quote,
      },
    });

    await ctx.followUp("‡∏Å‡∏£‡∏∞‡∏ú‡∏°‡∏ô‡πâ‡∏≠‡∏ô‡∏™‡∏•‡∏¥‡πà‡∏°‡∏à‡∏∞‡∏à‡∏î‡∏à‡∏≥‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡∏ö");
    await updateUserCredit(ctx, Actions.TrainQuote);

    await prismaQuote.reload();
  }

  @SlashCommand("‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏î‡∏±‡∏ä‡∏ô‡∏µ")
  async getquote(
    ctx: SlashCommand.Context,
    @Param.Integer("‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
    index: Param.Integer.Type,
  ) {
    const quote = combinedQuotes.getData()[index - 1];

    if (!quote) {
      const r = "‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏ô‡∏∞ ‡∏´‡∏±‡∏î‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏á ‡∏≠‡∏µ‡∏™‡∏≤‡∏°‡∏Å‡∏µ‡∏ö";
      sclient.corgiSwiftJutsu(ctx, r);
      await ctx.reply(r);
      return;
    }

    sclient.corgiSwiftJutsu(ctx, quote);
    await ctx.reply(`${quote} [${combinedQuotes.getRefIndex(index - 1)}]`);
  }

  @SlashCommand("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û")
  async searchquote(
    ctx: SlashCommand.Context,
    @Param.String("‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
    query: Param.String.Type,
    @Param.Ephemeral ephemeral: Param.Ephemeral.Type,
  ) {
    const results = Object.entries(combinedQuotes.getData()).filter((q) =>
      trim(q[1]).includes(trim(query)),
    );

    let description = "";

    const limit = 700;
    let progressed = 0;
    for (const [i, q] of results.slice(0, 10)) {
      progressed++;
      description += `üí≠ ${lim(q).replaceAll(
        "*",
        "\\*",
      )} **[${combinedQuotes.getRefIndex(+i)}]**\n`;
      if (description.length > limit) break;
    }

    if (!description) {
      description = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤";
    }

    if (results.length > progressed) {
      description += `‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏°‡∏µ‡∏≠‡∏µ‡∏Å ${results.length - progressed} ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏û‡∏ö`;
    }

    const emb = style
      .use(ctx)
      .setTitle(`‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏™‡∏•‡∏¥‡πà‡∏°‡πÄ‡∏à‡πã‡∏á‡πÜ ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ${query}`)
      .setDescription(description)
      .addFields([
        {
          name: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û",
          value: "[‡∏ß‡∏≤‡∏£‡πå‡∏õ](https://watasalim.vercel.app/)",
          inline: true,
        },
      ]);

    await ctx.reply({ embeds: [emb], ephemeral: ephemeral ?? false });
  }

  formatTime(ms_timestamp: number) {
    const t = Math.round(ms_timestamp / 1000);

    return `<t:${t}> (<t:${t}:R>)`;
  }

  socialCredit(score: number) {
    if (score < 0) {
      return "‡∏≠‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÉ‡∏î ‡πÜ ‡∏ï‡πà‡∏≠‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡πà‡∏≠ ‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô ‡∏™‡∏°‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏à‡∏±‡∏î‡∏ó‡∏¥‡πâ‡∏á";
    } else if (score < 500) {
      return "‡∏ô‡∏±‡∏Å‡πÇ‡∏ó‡∏©‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡πÉ‡∏ô‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ï‡∏±‡∏ß";
    } else if (score < 700) {
      return "‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ä‡∏±‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏±‡∏¢‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏≤‡∏ä‡∏≠‡∏≤‡∏ì‡∏≤‡∏à‡∏±‡∏Å‡∏£";
    } else if (score < 800) {
      return "‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏á‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢";
    } else if (score < 900) {
      return "‡∏û‡∏ß‡∏Å‡∏™‡∏≤‡∏°‡∏Å‡∏µ‡∏ö‡∏ä‡∏±‡∏á‡∏ä‡∏≤‡∏ï‡∏¥";
    } else if (score < 1100) {
      return "‡∏û‡∏•‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ";
    } else if (score < 1200) {
      return "‡∏Ñ‡∏ô‡∏î‡∏µ";
    } else if (score < 1300) {
      return "‡∏Ñ‡∏ô‡∏î‡∏µ‡∏¢‡∏¥‡πà‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏ô‡∏î‡∏µ";
    } else if (score < 1500) {
      return "‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏á‡∏£‡∏±‡∏Å‡∏†‡∏±‡∏Å‡∏î‡∏µ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≤‡∏£‡∏≠‡∏á‡∏ö‡∏≤‡∏ó‡∏ó‡∏∏‡∏Å‡∏ä‡∏≤‡∏ï‡∏¥‡πÑ‡∏õ‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≠‡∏°‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡πà‡∏≠‡∏´‡∏•‡∏ß‡∏á‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥";
    } else if (score < 2000) {
      return "‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ó‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ä‡∏≠‡∏¥‡∏™‡∏£‡∏¥‡∏¢‡∏≤‡∏†‡∏£‡∏ì‡πå";
    } else {
      return "‡∏û‡∏•‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÑ‡∏ó‡∏¢‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏Å‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏®‡∏≤‡∏™‡∏ô‡πå ‡∏Å‡∏©‡∏±‡∏ï‡∏£‡∏¥‡∏¢‡πå";
    }
  }

  @SlashCommand("‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ä‡∏≤‡∏ß‡πÑ‡∏ó‡∏¢")
  async citizenstatus(
    ctx: SlashCommand.Context,
    @Param.User("‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á", {
      required: false,
    })
    user: Param.User.Nullable,
  ) {
    user ??= ctx.user;

    const gmember = ctx.guild?.members.cache.get(user.id);

    const puser = await getUser3rdParty(user, ctx);

    const emb = style
      .use(ctx)
      .setTitle("‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ä‡∏≤‡∏ß‡πÑ‡∏ó‡∏¢")
      .setDescription("‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏•‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏û‡∏§‡∏ï‡∏¥")
      .setThumbnail(user.avatarURL() ?? user.defaultAvatarURL)
      .addInlineFields(
        {
          name: "‡∏ä‡∏∑‡πà‡∏≠",
          value: `<@${user.id}>`,
        },
        {
          name: "‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î",
          value: this.formatTime(user.createdTimestamp),
        },
        {
          name: "‡∏ß‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°",
          value: gmember?.joinedTimestamp
            ? this.formatTime(gmember.joinedTimestamp)
            : "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏ñ‡∏∑‡πà‡∏≠‡∏ô",
        },
        {
          name: "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°",
          value: `${Math.round(puser.socialCredit)} ‡πÅ‡∏ï‡πâ‡∏°`,
        },
        {
          name: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô",
          value: this.socialCredit(puser.socialCredit),
        },
      );

    await ctx.reply({ embeds: [emb] });
  }

  @SlashCommand("‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
  async citizenranking(ctx: SlashCommand.Context) {
    const topUsers = await prisma.user.findMany({
      orderBy: {
        socialCredit: "desc",
      },
      include: {
        profile: true,
      },
      where: {
        socialCredit: {
          gte: 900,
        },
      },
      take: 5,
    });

    const bottomUsers = await prisma.user.findMany({
      orderBy: {
        socialCredit: "asc",
      },
      include: {
        profile: true,
      },
      where: {
        socialCredit: {
          lt: 900,
        },
      },
      take: 5,
    });

    const avg = await prisma.user.aggregate({
      _avg: {
        socialCredit: true,
      },
    });

    const emb = style
      .use(ctx)
      .setTitle("‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
      .setDescription(
        "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏û‡∏•‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏î‡∏µ ‡πÅ‡∏•‡∏∞‡∏û‡∏ß‡∏Å‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô ‡∏ó‡πà‡∏≤‡∏ô‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏≠‡∏∑‡πà‡∏ô ‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤ ‡πÅ‡∏ï‡πà‡∏´‡∏≤‡∏Å‡πÄ‡∏Ç‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏•‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏î‡∏µ ‡πÄ‡∏Ç‡∏≤‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡∏¢‡πà‡∏≠‡∏á ‡πÅ‡∏ï‡πà‡∏´‡∏≤‡∏Å‡πÄ‡∏Ç‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏ß‡∏Å‡∏´‡∏ô‡∏±‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô ‡πÄ‡∏Ç‡∏≤‡∏Å‡πá‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ô‡∏≤‡∏°",
      )
      .addFields(
        {
          name: "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏î‡∏µ‡πÄ‡∏î‡πà‡∏ô",
          value: topUsers
            .map(
              (u, i) =>
                `${i + 1}. ‡∏ó‡πà‡∏≤‡∏ô ${u.profile?.username} ${u.socialCredit.toFixed(
                  2,
                )} ‡πÅ‡∏ï‡πâ‡∏°`,
            )
            .join("\n"),
        },
        {
          name: "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô",
          value: bottomUsers
            .map(
              (u, i) =>
                `${i + 1}. ‡πÑ‡∏≠‡πâ‡πÄ‡∏ß‡∏£ ${u.profile
                  ?.username} ${u.socialCredit.toFixed(2)} ‡πÅ‡∏ï‡πâ‡∏°`,
            )
            .join("\n"),
        },
        {
          name: "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢",
          value: avg._avg.socialCredit
            ? `${avg._avg.socialCredit.toFixed(2)} ‡πÅ‡∏ï‡πâ‡∏°`
            : "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á ‡∏ù‡∏µ‡∏°‡∏∑‡∏≠‡∏ó‡∏±‡∏Å‡∏©‡∏¥‡∏ì‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô",
        },
      );

    await ctx.reply({ embeds: [emb] });
  }

  private static readonly _16hours = 16 * 60 * 60 * 1000;

  @SlashCommand("‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏û‡πà‡∏≠‡∏´‡∏•‡∏ß‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πâ‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°")
  async essay(ctx: SlashCommand.Context) {
    const cooldown =
      (
        await prisma.cooldown.findUnique({
          where: { userId: ctx.user.id },
        })
      )?.essayToDad?.getTime() ?? 0;

    if (Date.now() - cooldown < Salim._16hours) {
      await ctx.reply(
        `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏à‡∏ô‡∏ñ‡∏∂‡∏á ${this.formatTime(
          cooldown + Salim._16hours,
        )} ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ`,
      );
      return;
    }

    const modal = new ModalBuilder()
      .setTitle("‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡πÉ‡∏ô‡∏´‡∏•‡∏ß‡∏á")
      .setCustomId("essay");

    const form = new TextInputBuilder()
      .setLabel("‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ ‡πë‡πë‡πë‡πí ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
      .setCustomId("essay-form")
      .setStyle(TextInputStyle.Paragraph)
      .setMaxLength(2048);

    const row =
      new ActionRowBuilder<ModalActionRowComponentBuilder>().addComponents(
        form,
      );

    modal.addComponents(row);

    await ctx.showModal(modal);
  }

  private async onEssaySubmit(ctx: ModalSubmitInteraction) {
    const content = ctx.fields.getTextInputValue("essay-form");

    let msg = "";
    let point = 0;
    if (content.length < 1112) {
      msg = `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∏‡∏ì <@${ctx.user.id}> ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á ‡πë‡πë‡πë‡πí ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏Ñ‡πà‡∏∞ ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏Ç‡∏≠‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏° ‡πë‡πë‡πí ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÇ‡∏ó‡∏©‡∏ô‡∏∞‡∏Ñ‡πà‡∏∞`;
      point = -112;
    } else {
      msg = `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∏‡∏ì <@${ctx.user.id}> ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏á‡∏£‡∏±‡∏Å‡∏†‡∏±‡∏Å‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏û‡πà‡∏≠‡∏´‡∏•‡∏ß‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏Ç‡∏≠‡∏°‡∏≠‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏° ‡πô ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏Ñ‡∏∞`;
      point = 9;
    }

    await updateUserCredit(ctx, point);
    await prisma.essay.create({
      data: {
        user: {
          connect: {
            id: ctx.user.id,
          },
        },
        content,
      },
    });
    await prisma.cooldown.upsert({
      where: {
        userId: ctx.user.id,
      },
      create: {
        essayToDad: new Date(),
        user: {
          connect: {
            id: ctx.user.id,
          },
        },
      },
      update: {
        essayToDad: new Date(),
      },
    });

    await ctx.reply(msg);
  }
}
